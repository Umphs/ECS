import { Entity } from "./Entity";
import { hashRS } from "./utils";
import { ComponentStore } from "./ComponentStore";

export abstract class Component {

  entity = -1 as unknown as Entity;

  enable() { }
  disable() { }

  readonly hash: number = (<ComponentType<this>>this.constructor).hash;
  static readonly hash: number;

  static register<C extends Component, T extends ComponentType<C>>(type: T): T;
  static register(): { <C extends Component, T extends ComponentType<C>>(type: T): T };

  static register(type?: any) {
    return type ? register(type) : register;
  }

}

function register<C extends Component, T extends ComponentType<C>>(type: T) {
  if (type.hash || type.prototype.hash)
    throw `A component type hash can only be generated by Component.register().`;
  type.hash = hashRS(type.name);
  ComponentStore.register(type);
  return type;
}

export type ComponentType<C extends Component = Component> = {
  prototype: C;
  new(entity: Entity): C;
  hash: number;
};